
Multi processor Scheduling

Cental Queue:
	- one queue for all processors
	- poor cache affinity - since a process might run on other processor next cycle, cold cache are higher


Distributed Queue:
	- n queues for m process , where n  can be == m. less contention.
   -	load balancing betweeen thhe queues is a problem
- high cache affinitiy - same processor it executed last time - warm cache
	cold.
	warm cache vs cold cache


Gang Scheduling:
	parallel applications
	-  schdedule parallel application at once on all cores or processors.
    -  reduce waiting and blocking from message or ipc

	what if one of the threads running makes a blocking call?
	- preempt entire application
	- raise prioirty so preemption does not occur (smat scheduling)
	- both of the above.
	- 

	scheduling for general cases or parallel application.

spin lock : A lock, busy waiting, running the cycle trying to acquire the lock.
	normal lock the threads go idle.



Distributed scheduling:
	scheduling across machines:
	was invented to harness idle cycles of idle workstation in an environment.(NoW)
	

	Components:
		Transfer policy :  when to transfer  - based on utilization and threshold
		Selection  - which procss  -  new process, transfer cost should be low to execution cost
								select long running process
		Location Policy - where to - polling ,random,nearest neighbour
		Information policy -  when and from where
		
		Sender - Initiated Policy
			Transfer Policy -- T , N < T = locally execute
					N> T = become  sender and offload
			-- Sender P  :  newly arrived process (selection)
			- location  p :   (decision made locally)
						- Random machine - may initiate lot of transfer , so limit transfers, since the target 				 machine not accept the job of threshold
						- Threshold - probe nodes sequencially and send to machine if the machine has low load < T
			- Shortest - Query Paralle, choose one < T.

			Reciever initiated Policy :
				Trasn- if N <as

        Reciever Initiated Policy:
            Transfer - if  N < T , find a proces from elseware.
            Selection : new process, partially executed process.
            Location - Threshold , sequen or parallel probe


        Symmetric Policy :
            Nodes act as both senders and recievers, use average load as threshold.
            two threshold, LT and UT
            if N < T , receiver
            if N > T sender
            sender : poll on receiver list
            receiver : poll on sender list
    

    Case Study - 1:   V-System(Stanford)
        Info Policy : state change driven, broadcost your state to all other nodes.
        M least loaded nodes are receivers and others are senders.
        Sender initiated with new job selection policy. check with receiver first if its avaialbel to take work.
        Location Policy :   probe random receiver from M, if it still receiver then transfer job else check with another.

    Sprite (Berkeley):
        Workstation enviroment - owner is king !!!
        Centralized information policy - all the state is stored, (state driven)
            receiver - workstatio with no keyboard /mouse activity for 30 secondsand #active procesors < number of process.
        Selection Policy :  manually done by user. => workstation becomes sender.
        Location Policy : sender queries coordinator.
        if user starts using the machine again,the remote process is stopped and it is transfer to other machine.
        first implemented process migration.
            state-transfer
            swap everything out
            send page tables and file desciptor to receiver
            demand page process in
            facilated by sprite file system.
            only dependencies are communicated related.
            what happend to network connections ?? :
                cannot be done in sprite


    Condor:
        active today
        used to run large batch jobs:
        idle machines contact condor for work.
        condor has master coordinator.
        submit job to coordinator. it finds an idle machine,idle machnie contact coordinator.
        if user returns , it suspends the remote process
        process migration is supported.
        configure the machine for if the os doesnt support process migration.
        Flexbale job scheduling policies.

            
    Volunteer Computing:
        Over the Internet !!!
        Receiver initiated policy.
        donate cpu cycles/storage when not in use.(pool resources)
        users should volunteer.
        Idling  machines contact a coordinator for work.
        coordinator , partition large task into small tasks, assign small tasks to PCS. ( this is gonna save time, if PC suddenly goes off network.)

        SETI@home




Cluster Scheduling : (relevent today)
    - scheduling  tasks on to a cluster of servers.
    - machines are cheap, no need to rely on idle servers.
    - Use a cluster of powerful server to run tasks.

    Two apps:
    
    Interactive Applications:
        Web servers:
        A job is a single web request.
    
    Batch Jobs:
        job is long running process. batch schudler.


    dispatcher nod : all incoming request come here
        web request -> send it one of the server based on policy.
        batch job :


    Scheduling for cluster of Web Servers;
    N - server , 1 load balancer/dispatcher.
    request arrive at a queue.
    how to choose a node.
        Least loaded.
        Round robin
        weighted round robin
    Session level or request level
    request level - each rqeuest is load balanced.
    session level - send all the request from that session to the same node.


    Scheduling Batch Jobs:
        - ml trainnig,data processing tasks, simulations
        users submit to a queue, dispatcher scheudle jobs
        SLURM - 

